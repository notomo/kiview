
call themis#option('recursive', 1)

let s:root = getcwd()

function! KiviewTestAssert() abort
    let assert = themis#helper('assert')

    function! assert.window_count(expected) abort
        let actual = tabpagewinnr(tabpagenr(), '$')
        let message = printf('window count must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.tab_count(expected) abort
        let actual = tabpagenr('$')
        let message = printf('tab count should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.contains(haystack, needle) abort
        call self.true(count(a:haystack, a:needle) != 0, a:needle . ' must be in the haystack')
    endfunction

    function! assert.count_contains(haystack, needle, expected) abort
        let actual = count(a:haystack, a:needle)
        let message = printf('%s must be in the haystack exactly %s times', a:needle, a:expected)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.not_contains(haystack, needle) abort
        call self.false(count(a:haystack, a:needle) != 0, a:needle . ' must not be in the haystack')
    endfunction

    function! assert.current_line(expected) abort
        let actual = getline(line('.'))
        let message = printf('current line should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.file_name(expected) abort
        let actual = fnamemodify(bufname('%'), ':t')
        let message = printf('file name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.path(expected) abort
        let actual = fnamemodify(expand('%:p'), ':.')
        let message = printf('file path should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.syntax_name(expected) abort
        let actual = synIDattr(synID(line('.'), col('.'), v:true), 'name')
        let message = printf('syntax name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.filetype(expected) abort
        let actual = &filetype
        let message = printf('&filetype should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.lines(expected) abort
        let actual = getbufline('%', 1, '$')
        let message = printf('lines should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.line_number(expected) abort
        let actual = line('.')
        let message = printf('line_number should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.working_dir(expected) abort
        let actual = getcwd()
        let message = printf('current working dir should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.buffer_name(expected) abort
        let actual = expand('%')
        let message = printf('status should match %s, but actual: %s', a:expected, actual)
        call self.match(actual, a:expected, message)
    endfunction

    function! assert.file_not_empty(file_path) abort
        let contents = readfile(a:file_path)
        let message = printf('%s should not be empty file, but actual empty', a:file_path)
        call self.not_empty(contents, message)
    endfunction

    function! assert.file_empty(file_path) abort
        let contents = readfile(a:file_path)
        let message = printf('%s should be empty file, but actual: %s', a:file_path, contents)
        call self.empty(contents, message)
    endfunction

    return assert
endfunction

function! KiviewTestBeforeEach() abort
    call mkdir('./test/plugin/_test_data', 'p')

    execute 'cd' s:root

    call kiview#logger#set_func({ msg -> themis#log(msg) })
    call kiview#messenger#set_func({ msg -> themis#log('[test messenger] ' . msg) })
    call themis#log('')

    filetype on
    syntax enable
endfunction

function! KiviewTestAfterEach() abort
    silent! %bwipeout!
    execute 'cd' s:root
    call kiview#logger#clear()
    call kiview#input_reader#clear()

    filetype off
    syntax off

    call delete('./test/plugin/_test_data', 'rf')

    let finished = kiview#command#finished()
    call kiview#command#abort()
    if !finished
        call themis#helper('assert').fail('command is still running')
    endif
endfunction
