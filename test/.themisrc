
call themis#option('recursive', 1)

let s:root = getcwd()

function! KiviewTestAssert() abort
    let assert = themis#helper('assert')

    function! assert.window_count(expected) abort
        let actual = tabpagewinnr(tabpagenr(), '$')
        let message = printf('window count must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.tab_count(expected) abort
        let actual = tabpagenr('$')
        let message = printf('tab count should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.contains(haystack, needle) abort
        call self.true(count(a:haystack, a:needle) != 0, a:needle . ' must be in the haystack')
    endfunction

    function! assert.not_contains(haystack, needle) abort
        call self.false(count(a:haystack, a:needle) != 0, a:needle . ' must not be in the haystack')
    endfunction

    function! assert.file_name(expected) abort
        let actual = fnamemodify(bufname('%'), ':t')
        let message = printf('file name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.path(expected) abort
        let actual = fnamemodify(expand('%:p'), ':.')
        let message = printf('file path should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.syntax_name(expected) abort
        let actual = synIDattr(synID(line('.'), col('.'), v:true), 'name')
        let message = printf('syntax name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.filetype(expected) abort
        let actual = &filetype
        let message = printf('&filetype should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.lines(expected) abort
        let actual = getbufline('%', 1, '$')
        let message = printf('lines should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.line_number(expected) abort
        let actual = line('.')
        let message = printf('line_number should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.dir(expected) abort
        let actual = getcwd()
        let message = printf('current dir should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.buffer_name(expected) abort
        let actual = expand('%')
        let message = printf('status should match %s, but actual: %s', a:expected, actual)
        call self.match(actual, a:expected, message)
    endfunction

    return assert
endfunction

function! KiviewTestBeforeEach() abort
    execute 'cd' s:root

    call s:clear_test_data()
    call s:make_test_data()

    call kiview#logger#set_func({ msg -> themis#log(msg) })
    call kiview#messenger#set_func({ msg -> themis#log('[test messenger] ' . msg) })
    call themis#log('')
endfunction

function! KiviewTestAfterEach() abort
    silent! %bwipeout!
    execute 'cd' s:root
    call kiview#logger#clear()
    call kiview#input_reader#clear()

    call s:clear_test_data()
endfunction

function! s:make_test_data() abort
    call system(['touch', './test/plugin/_test_data/removed_file1'])
    call system(['touch', './test/plugin/_test_data/removed_file2'])
    call system(['touch', './test/plugin/_test_data/removed_cancel_file'])

    call mkdir('./test/plugin/_test_data/removed_dir', 'p')
    call system(['touch', './test/plugin/_test_data/removed_dir/file'])

    call system(['touch', './test/plugin/_test_data/copy_file'])
    call system(['touch', './test/plugin/_test_data/cut_file'])
    call system(['touch', './test/plugin/_test_data/rename_file'])
    call mkdir('./test/plugin/_test_data/paste', 'p')
endfunction

function! s:clear_test_data() abort
    call delete('./test/plugin/_test_data/removed_dir', 'rf')
    call delete('./test/plugin/_test_data/removed_file1')
    call delete('./test/plugin/_test_data/removed_file2')

    call delete('./test/plugin/_test_data/new', 'rf')
    call delete('./test/plugin/_test_data/removed_cancel_file')

    call delete('./test/plugin/_test_data/copy_file')
    call delete('./test/plugin/_test_data/cut_file')
    call delete('./test/plugin/_test_data/rename_file')
    call delete('./test/plugin/_test_data/renamed_file')
    call delete('./test/plugin/_test_data/paste', 'rf')
endfunction
