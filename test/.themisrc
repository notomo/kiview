
call themis#option('recursive', 1)

let s:root = getcwd()
let s:test_data_dir = './test/plugin/_test_data/'

function! KiviewTestHelper() abort
    let helper = {
        \ 'before_each': function('s:before_each'),
        \ 'after_each': function('s:after_each'),
    \ }

    function! helper.execute(arg, ...) abort
        let options = get(a:000, 0, {})
        return kiview#main(a:arg, options)
    endfunction

    function! helper.sync_execute(arg, ...) abort
        let options = get(a:000, 0, {})
        let command = self.execute(a:arg, options)
        call command.wait()
        return command
    endfunction

    function! helper.new_file(path) abort
        call system(['touch', s:test_data_dir . a:path])
    endfunction

    function! helper.new_file_with_content(path, content) abort
        call self.new_file(a:path)
        call writefile(a:content, s:test_data_dir . a:path)
    endfunction

    function! helper.new_directory(path) abort
        call mkdir(s:test_data_dir . a:path, 'p')
    endfunction

    function! helper.suite(name) abort
        let suite = themis#suite(a:name)
        let suite.before_each = self.before_each
        let suite.after_each = self.after_each
        return suite
    endfunction

    function! helper.assert() abort
        return s:assert()
    endfunction

    function! helper.sub_suite(name) abort
        return themis#suite(a:name)
    endfunction

    function! helper.lines() abort
        return getbufline('%', 1, '$')
    endfunction

    function! helper.replace(from, to) abort
        let old_line = getline('.')
        let new_line = substitute(old_line, a:from, a:to, '')
        if old_line ==? new_line
            let message = printf('failed: substitute("%s", "%s", "%s", "")', old_line, a:from, a:to)
            call self.assert().fail(message)
            return
        endif
        call setline('.', new_line)
    endfunction

    function! helper.search(pattern) abort
        let result = search(a:pattern)
        if result == 0
            let message = printf('%s not found', a:pattern)
            call self.assert().fail(message)
        endif
        return result
    endfunction

    function! helper.set_input(...) abort
        let f = {'answers': a:000}
        function! f.read(msg, default) abort
            let answer = self.answers[0]
            call themis#log('[default prompt] ' . a:default)
            call themis#log('[prompt] ' . a:msg . answer)
            let self.answers = self.answers[1:]
            return answer
        endfunction

        call kiview#input_reader#set_func({ msg, default -> f.read(msg, default) })
    endfunction

    function! helper.messenger() abort
        let f = {'msg': ''}
        function! f.echo(msg) abort
            let self.msg = a:msg
            call themis#log('[messenger] ' . a:msg)
        endfunction

        call kiview#messenger#set_func({ msg -> f.echo(msg) })
        return f
    endfunction

    return helper
endfunction

function! s:assert() abort
    let assert = themis#helper('assert')

    function! assert.window_count(expected) abort
        let actual = tabpagewinnr(tabpagenr(), '$')
        let message = printf('window count must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.tab_count(expected) abort
        let actual = tabpagenr('$')
        let message = printf('tab count should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.contains(haystack, needle) abort
        call self.true(count(a:haystack, a:needle) != 0, a:needle . ' must be in the haystack')
    endfunction

    function! assert.count_contains(haystack, needle, expected) abort
        let actual = count(a:haystack, a:needle)
        let message = printf('%s must be in the haystack exactly %s times', a:needle, a:expected)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.not_contains(haystack, needle) abort
        call self.false(count(a:haystack, a:needle) != 0, a:needle . ' must not be in the haystack')
    endfunction

    function! assert.current_line(expected) abort
        let actual = getline(line('.'))
        let message = printf('current line should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.file_name(expected) abort
        let actual = fnamemodify(bufname('%'), ':t')
        let message = printf('file name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.path(expected) abort
        let actual = fnamemodify(expand('%:p'), ':.')
        let message = printf('file path should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.syntax_name(expected) abort
        let actual = synIDattr(synID(line('.'), col('.'), v:true), 'name')
        let message = printf('syntax name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.filetype(expected) abort
        let actual = &filetype
        let message = printf('&filetype should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.lines(expected) abort
        let actual = getbufline('%', 1, '$')
        let message = printf('lines should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.line_number(expected) abort
        let actual = line('.')
        let message = printf('line_number should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.working_dir(expected) abort
        let actual = getcwd()
        let message = printf('current working dir should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.buffer_name(expected) abort
        let actual = expand('%')
        let message = printf('status should match %s, but actual: %s', a:expected, actual)
        call self.match(actual, a:expected, message)
    endfunction

    function! assert.modified(expected) abort
        let actual = &modified
        let message = printf('&modified should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.file_not_empty(file_path) abort
        let contents = readfile(a:file_path)
        let message = printf('%s should not be empty file, but actual empty', a:file_path)
        call self.not_empty(contents, message)
    endfunction

    function! assert.file_empty(file_path) abort
        let contents = readfile(a:file_path)
        let message = printf('%s should be empty file, but actual: %s', a:file_path, contents)
        call self.empty(contents, message)
    endfunction

    function! assert.file_not_exists(file_path) abort
        let readable =  filereadable(a:file_path)
        let message = printf('%s should not exist, but exists', a:file_path)
        call self.false(readable, message)
    endfunction

    function! assert.ends_with(haystack, expected) abort
        let ends_with = a:haystack =~# a:expected . '$'
        let message = printf('%s should be ends with %s', a:haystack, a:expected)
        call self.true(ends_with, message)
    endfunction

    return assert
endfunction

function! s:before_each() abort
    call mkdir(s:test_data_dir, 'p')

    execute 'cd' s:root

    call kiview#logger#set_func({ msg -> themis#log(msg) })
    call kiview#messenger#set_func({ msg -> themis#log('[test messenger] ' . msg) })
    call themis#log('')

    filetype on
    syntax enable
endfunction

function! s:after_each() abort
    tabedit
    tabonly!
    silent! %bwipeout!
    execute 'cd' s:root
    call kiview#logger#clear()
    call kiview#input_reader#clear()

    filetype off
    syntax off

    call delete(s:test_data_dir, 'rf')

    let finished = kiview#command#finished()
    call kiview#command#abort()
    if !finished
        call themis#helper('assert').fail('command is still running')
    endif
endfunction
